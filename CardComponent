import SwiftUI

// MARK: - Style

public enum CardStyle {
    case glass
    case regular
}

// MARK: - Card Container (now supports .glass & .regular)

struct Card<Content: View>: View {
    var style: CardStyle = .glass
    var cornerRadius: CGFloat = 16
    var padding: CGFloat = 16
    var showsBorder: Bool = true          // used by .regular
    var shadowRadius: CGFloat = 12        // used by .regular
    var shadowYOffset: CGFloat = 6        // used by .regular
    var onTap: (() -> Void)? = nil
    @ViewBuilder var content: () -> Content

    @Environment(\.colorScheme) private var scheme
    @State private var isPressed = false

    var body: some View {
        content()
            .padding(padding)
            .background(background)
            .modifier(Depth(style: style,
                            scheme: scheme,
                            regularRadius: shadowRadius,
                            regularYOffset: shadowYOffset))
            .scaleEffect(isPressed && onTap != nil ? 0.98 : 1)
            .animation(.spring(response: 0.25, dampingFraction: 0.8), value: isPressed)
            .contentShape(RoundedRectangle(cornerRadius: cornerRadius, style: .continuous))
            .onTapGesture {
                guard onTap != nil else { return }
                isPressed = true
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.12) {
                    isPressed = false
                    onTap?()
                }
            }
    }

    // Background switches based on style
    @ViewBuilder private var background: some View {
        switch style {
        case .glass:
            GlassBackground(cornerRadius: cornerRadius)
        case .regular:
            RegularBackground(cornerRadius: cornerRadius, showsBorder: showsBorder)
        }
    }
}

// MARK: - Depth / Shadow per style

private struct Depth: ViewModifier {
    let style: CardStyle
    let scheme: ColorScheme
    let regularRadius: CGFloat
    let regularYOffset: CGFloat

    func body(content: Content) -> some View {
        switch style {
        case .glass:
            // slightly stronger, higher shadow sells the frosted feel
            content.shadow(color: .black.opacity(scheme == .dark ? 0.45 : 0.12), radius: 18, x: 0, y: 10)
        case .regular:
            // classic soft card shadow
            content.shadow(color: .black.opacity(scheme == .dark ? 0.35 : 0.06),
                           radius: regularRadius, x: 0, y: regularYOffset)
        }
    }
}

// MARK: - Glass Background (unchanged from prior step)

private struct GlassBackground: View {
    var cornerRadius: CGFloat

    var body: some View {
        let shape = RoundedRectangle(cornerRadius: cornerRadius, style: .continuous)

        shape
            .fill(.ultraThinMaterial)
            .overlay(
                shape
                    .fill(
                        LinearGradient(
                            colors: [
                                .white.opacity(0.14),
                                .white.opacity(0.04),
                                .clear
                            ],
                            startPoint: .topLeading,
                            endPoint: .bottomTrailing
                        )
                    )
                    .blendMode(.overlay)
            )
            .overlay(
                shape
                    .strokeBorder(
                        LinearGradient(
                            colors: [
                                .white.opacity(0.85),
                                .white.opacity(0.35),
                                .white.opacity(0.15)
                            ],
                            startPoint: .topLeading,
                            endPoint: .bottomTrailing
                        ),
                        lineWidth: 1
                    )
            )
            .overlay(
                shape
                    .strokeBorder(
                        LinearGradient(
                            colors: [.white.opacity(0.45), .clear],
                            startPoint: .top,
                            endPoint: .center
                        ),
                        lineWidth: 0.75
                    )
                    .blur(radius: 0.2)
                    .opacity(0.9)
            )
    }
}

// MARK: - Regular Background (new)

private struct RegularBackground: View {
    var cornerRadius: CGFloat
    var showsBorder: Bool
    @Environment(\.colorScheme) private var scheme

    var body: some View {
        let shape = RoundedRectangle(cornerRadius: cornerRadius, style: .continuous)

        shape
            .fill(.background)
            .overlay(
                Group {
                    if showsBorder {
                        shape
                            .stroke(.gray.opacity(scheme == .dark ? 0.35 : 0.20), lineWidth: 1)
                    }
                }
            )
    }
}

// MARK: - Example: CardItemView can forward style

struct CardItemView: View {
    var title: String
    var subtitle: String? = nil
    var footnote: String? = nil
    var avatarURL: URL? = nil
    var systemImage: String = "car.fill"
    var badge: String? = nil
    var showsChevron: Bool = true
    var isLoading: Bool = false
    var cardStyle: CardStyle = .glass           // <— choose .glass or .regular
    var onTap: (() -> Void)? = nil

    var body: some View {
        Card(style: cardStyle, onTap: onTap) {
            HStack(spacing: 12) {
                AvatarView(url: avatarURL, systemImage: systemImage)

                VStack(alignment: .leading, spacing: 4) {
                    HStack(alignment: .firstTextBaseline) {
                        Text(title)
                            .font(.headline)
                            .lineLimit(1)
                            .accessibilityAddTraits(.isHeader)
                        Spacer(minLength: 8)
                        if let badge {
                            Text(badge)
                                .font(.caption2.weight(.semibold))
                                .padding(.horizontal, 6)
                                .padding(.vertical, 3)
                                .background(Capsule().fill(.thinMaterial))
                                .overlay(
                                    Capsule().stroke(.gray.opacity(0.25), lineWidth: 0.5)
                                )
                        }
                    }
                    if let subtitle {
                        Text(subtitle)
                            .font(.subheadline)
                            .foregroundStyle(.secondary)
                            .lineLimit(2)
                    }
                    if let footnote, !footnote.isEmpty {
                        Text(footnote)
                            .font(.footnote)
                            .foregroundStyle(.tertiary)
                            .lineLimit(1)
                    }
                }

                if showsChevron {
                    Image(systemName: "chevron.right")
                        .font(.footnote.weight(.semibold))
                        .foregroundStyle(.tertiary)
                        .accessibilityHidden(true)
                }
            }
        }
        .redacted(reason: isLoading ? .placeholder : [])
        .accessibilityElement(children: .combine)
    }
}

// MARK: - Avatar (same as before)

struct AvatarView: View {
    let url: URL?
    var systemImage: String = "car.fill"
    var size: CGFloat = 44

    var body: some View {
        Group {
            if let url {
                AsyncImage(url: url) { phase in
                    switch phase {
                    case .empty:
                        ProgressView()
                            .frame(width: size, height: size)
                    case .success(let image):
                        image
                            .resizable()
                            .scaledToFill()
                            .frame(width: size, height: size)
                            .clipped()
                    case .failure:
                        fallback
                    @unknown default:
                        fallback
                    }
                }
                .clipShape(Circle())
            } else {
                fallback
            }
        }
        .frame(width: size, height: size)
    }

    private var fallback: some View {
        Image(systemName: systemImage)
            .font(.system(size: size * 0.43, weight: .semibold))
            .foregroundStyle(.white)
            .frame(width: size, height: size)
            .background(Circle().fill(.tint))
    }
}

// MARK: - Quick usage

#Preview("Glass vs Regular") {
    VStack(spacing: 16) {
        CardItemView(
            title: "2016 Honda Accord EX-L",
            subtitle: "Next service: 10/15 • 64,500 mi",
            footnote: "VIN • 1HGCR2F83GA012345",
            avatarURL: URL(string: "https://images.pexels.com/photos/358070/pexels-photo-358070.jpeg"),
            badge: "Primary",
            cardStyle: .glass
        )

        CardItemView(
            title: "2013 Honda CR-V",
            subtitle: "Tire rotation due soon",
            footnote: "VIN • 5J6RM4H7XDL012345",
            avatarURL: nil,
            badge: nil,
            cardStyle: .regular
        )
    }
    .padding()
    .background(
        LinearGradient(colors: [.mint.opacity(0.55), .blue.opacity(0.55)],
                       startPoint: .topLeading, endPoint: .bottomTrailing)
        .ignoresSafeArea()
    )
}
