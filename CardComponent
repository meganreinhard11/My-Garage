import SwiftUI

// MARK: - Generic Card Container

struct Card<Content: View>: View {
    var cornerRadius: CGFloat = 16
    var padding: CGFloat = 16
    var showsBorder: Bool = true
    var onTap: (() -> Void)? = nil
    @ViewBuilder var content: () -> Content

    @Environment(\.colorScheme) private var scheme
    @State private var isPressed = false

    var body: some View {
        content()
            .padding(padding)
            .background(
                RoundedRectangle(cornerRadius: cornerRadius, style: .continuous)
                    .fill(.background)
                    .overlay(
                        Group {
                            if showsBorder {
                                RoundedRectangle(cornerRadius: cornerRadius, style: .continuous)
                                    .stroke(.gray.opacity(scheme == .dark ? 0.35 : 0.20), lineWidth: 1)
                            }
                        }
                    )
            )
            .shadow(color: .black.opacity(scheme == .dark ? 0.35 : 0.06), radius: 12, x: 0, y: 6)
            .scaleEffect(isPressed && onTap != nil ? 0.98 : 1)
            .animation(.spring(response: 0.25, dampingFraction: 0.8), value: isPressed)
            .contentShape(RoundedRectangle(cornerRadius: cornerRadius, style: .continuous))
            .onTapGesture {
                guard onTap != nil else { return }
                isPressed = true
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.12) {
                    isPressed = false
                    onTap?()
                }
            }
    }
}

// MARK: - Avatar

struct AvatarView: View {
    let url: URL?
    var systemImage: String = "car.fill"
    var size: CGFloat = 44

    var body: some View {
        Group {
            if let url {
                AsyncImage(url: url) { phase in
                    switch phase {
                    case .empty:
                        ProgressView()
                            .frame(width: size, height: size)
                    case .success(let image):
                        image
                            .resizable()
                            .scaledToFill()
                            .frame(width: size, height: size)
                            .clipped()
                    case .failure:
                        fallback
                    @unknown default:
                        fallback
                    }
                }
                .clipShape(Circle())
            } else {
                fallback
            }
        }
        .frame(width: size, height: size)
    }

    private var fallback: some View {
        Image(systemName: systemImage)
            .font(.system(size: size * 0.43, weight: .semibold))
            .foregroundStyle(.white)
            .frame(width: size, height: size)
            .background(Circle().fill(.tint))
    }
}

// MARK: - Reusable Card Item Row

struct CardItemView: View {
    var title: String
    var subtitle: String? = nil
    var footnote: String? = nil
    var avatarURL: URL? = nil
    var systemImage: String = "car.fill"
    var badge: String? = nil
    var showsChevron: Bool = true
    var isLoading: Bool = false
    var onTap: (() -> Void)? = nil

    var body: some View {
        Card(onTap: onTap) {
            HStack(spacing: 12) {
                AvatarView(url: avatarURL, systemImage: systemImage)

                VStack(alignment: .leading, spacing: 4) {
                    HStack(alignment: .firstTextBaseline) {
                        Text(title)
                            .font(.headline)
                            .lineLimit(1)
                            .accessibilityAddTraits(.isHeader)
                        Spacer(minLength: 8)
                        if let badge {
                            Text(badge)
                                .font(.caption2.weight(.semibold))
                                .padding(.horizontal, 6)
                                .padding(.vertical, 3)
                                .background(Capsule().fill(.thinMaterial))
                                .overlay(
                                    Capsule().stroke(.gray.opacity(0.25), lineWidth: 0.5)
                                )
                                .accessibilityLabel("Badge \(badge)")
                        }
                    }

                    if let subtitle {
                        Text(subtitle)
                            .font(.subheadline)
                            .foregroundStyle(.secondary)
                            .lineLimit(2)
                    }

                    if let footnote, !footnote.isEmpty {
                        Text(footnote)
                            .font(.footnote)
                            .foregroundStyle(.tertiary)
                            .lineLimit(1)
                    }
                }

                if showsChevron {
                    Image(systemName: "chevron.right")
                        .font(.footnote.weight(.semibold))
                        .foregroundStyle(.tertiary)
                        .accessibilityHidden(true)
                }
            }
        }
        .redacted(reason: isLoading ? .placeholder : [])
        .accessibilityElement(children: .combine)
    }
}

// MARK: - Demo / Usage

struct CardItemDemoList: View {
    struct DemoItem: Identifiable {
        let id = UUID()
        let title: String
        let subtitle: String
        let footnote: String
        let avatar: URL?
        let badge: String?
    }

    @State private var items: [DemoItem] = [
        .init(title: "2016 Honda Accord EX-L",
              subtitle: "Next service: 10/15 • 64,500 mi",
              footnote: "VIN ending • 1234",
              avatar: URL(string: "https://images.pexels.com/photos/358070/pexels-photo-358070.jpeg"),
              badge: "Primary"),
        .init(title: "2013 Honda CR-V",
              subtitle: "Tire rotation due soon",
              footnote: "VIN ending • 9876",
              avatar: nil,
              badge: nil)
    ]

    var body: some View {
        NavigationStack {
            List {
                ForEach(items) { item in
                    CardItemView(
                        title: item.title,
                        subtitle: item.subtitle,
                        footnote: item.footnote,
                        avatarURL: item.avatar,
                        systemImage: "car.fill",
                        badge: item.badge,
                        showsChevron: true,
                        onTap: {
                            // Handle tap
                        }
                    )
                    .listRowInsets(EdgeInsets())               // edge-to-edge card
                    .listRowSeparator(.hidden)                 // hide default separator
                    .listRowBackground(Color.clear)            // let card shadow show
                    .swipeActions(edge: .trailing, allowsFullSwipe: true) {
                        Button(role: .destructive) {
                            withAnimation {
                                _ = items.firstIndex(where: { $0.id == item.id }).map { items.remove(at: $0) }
                            }
                        } label: {
                            Label("Delete", systemImage: "trash")
                        }
                    }
                    .swipeActions(edge: .leading) {
                        Button {
                            // Pin action
                        } label: {
                            Label("Pin", systemImage: "pin")
                        }.tint(.yellow)
                    }
                }
            }
            .listStyle(.plain)
            .navigationTitle("My Garage")
            .toolbar {
                ToolbarItem(placement: .topBarTrailing) {
                    Button {
                        // Add new item
                    } label: {
                        Image(systemName: "plus.circle.fill")
                    }
                }
            }
        }
    }
}

// MARK: - Previews

#Preview("CardItemView (Standalone)") {
    VStack(spacing: 16) {
        CardItemView(
            title: "2016 Honda Accord EX-L",
            subtitle: "Next service: 10/15 • 64,500 mi",
            footnote: "VIN • 1HGCR2F83GA012345",
            avatarURL: URL(string: "https://images.pexels.com/photos/358070/pexels-photo-358070.jpeg"),
            badge: "Primary"
        )

        CardItemView(
            title: "Upload Receipt",
            subtitle: "JPEG or PNG • up to 10 MB",
            footnote: "",
            avatarURL: nil,
            systemImage: "doc.on.doc.fill",
            badge: "Action",
            showsChevron: false,
            isLoading: false
        )
    }
    .padding()
    .background(Color(UIColor.systemGroupedBackground))
}

#Preview("CardItemView in List (Swipe)") {
    CardItemDemoList()
}
